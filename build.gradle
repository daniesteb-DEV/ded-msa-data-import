import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url System.getenv('GENERIC_MAVEN_URL')
        }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.3.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

def packageName = "dev.daniesteb.ded.data.imports"
def dirName = "dev/daniesteb/ded/data/imports"
def buildDir = "${projectDir}/build"

springBoot {
    mainClass = "${packageName}.MainApplication"
}

apply plugin: "java"
apply plugin: "org.openapi.generator"

group = "${packageName}"
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url System.getenv('GENERIC_MAVEN_SPRING_REPO_URL')
    }
}

ext {
    mapstructVersion = "1.5.5.Final"
    lombokVersion = "1.18.30"
    apachepoiVersion = "5.2.5"
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.7.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Lombok
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Logs
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    // Apache Poi
    implementation "org.apache.poi:poi:${apachepoiVersion}"
    implementation "org.apache.poi:poi-ooxml:${apachepoiVersion}"

    // azure.core
    implementation 'com.azure:azure-core:1.49.0'

    // JDBC Reactive
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'io.r2dbc:r2dbc-spi'
    implementation 'io.r2dbc:r2dbc-mssql'

    // google guava
    implementation 'com.google.guava:guava:33.2.0-jre'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'io.projectreactor:reactor-test'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.register('buildSpringServer', GenerateTask) {
    generatorName = "spring"
    templateDir = "${rootDir}/src/main/resources/openapi-templates"
    inputSpec = "${rootDir}/src/main/resources/openapi.yaml".toString()
    outputDir = "${buildDir}/generated".toString()
    apiPackage = "${packageName}.infrastructure.input.rest"
    modelPackage = "${packageName}.infrastructure.input.rest.bean"
    library = "spring-boot"
    configOptions = [
            skipDefaultInterface                    : "true",
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            reactive                                : "true",
            apiFirst                                : "false",
            delegatePattern                         : "false",
            configPackage                           : "${packageName}.infrastructure.input.rest.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "dev.daniesteb",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}

compileJava {
    dependsOn buildSpringServer
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["${buildDir}/generated/src/main/java", "src/main/java"]

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "${dirName}/domain/mapper/*Impl.class",
                    "${dirName}/infrastructure/input/adapter/rest/**/*.class",
                    "${dirName}/infrastructure/input/adapter/rest/mapper/*Impl.class",
            ])
        }))
    }
    reports {
        xml.required = true
        xml.destination file("${buildDir}/jacoco/test.xml")
        html.destination file("${buildDir}/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}
